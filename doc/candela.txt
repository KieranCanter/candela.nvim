*candela.txt*                 Regex Highlighter
*candela* *candela.nvim*

====================================================================================================
CONTENTS                                                    *candela-contents*

    1. Introduction                                     |candela-introduction|
    2. Requirements                                     |candela-requirements|
    3. Installation                                     |candela-installation|
    4. Configuration                                   |candela-configuration|
        - Defaults                               |candela-config-defaults|
        - Options                                 |candela-config-options|
        - Window                              |candela-config-window|
        - Engine                              |candela-config-engine|
        - Matching                          |candela-config-matching|
        - Lightbox                          |candela-config-lightbox|
        - Icons                                |candela-config-icons|
        - Palette                            |candela-config-palette|
            - Colors                      |candela-config-colors|
            - Swatches                  |candela-config-swatches|
        - Syntax Highlighting    |candela-config-syntax-highlighting|
    5. Keymaps                                               |candela-keymaps|
    6. Commands                                             |candela-commands|
    7. API                                                       |candela-api|
    8. Lightbox                                             |candela-lightbox|
    9. IO                                                         |candela-io|
    10. Acknowledgements                            |candela-acknowledgements|

====================================================================================================
INTRODUCTION                                            *candela-introduction*

regex highlighter. designed for efficient log analysis.

====================================================================================================
REQUIREMENTS                                            *candela-requirements*

- Regex search tool (ripgrep, ag, ugrep, ack, grep).

That's it.

====================================================================================================
INSTALLATION                                            *candela-installation*

You probably know how to use your preferred package manager. The GitHub repo
is `KieranCanter/candela.nvim`. The `lazy.nvim` snippet is: >

    {
        "KieranCanter/candela.nvim",
        opts = {},
    }

====================================================================================================
CONFIGURATION                                          *candela-configuration*

There's a fair bit of configurable options with Candela, but none of them are
necessary to explicitly set; the defaults are reasonable imo.

                                                 *candela-config-defaults*
Defaults ~
>lua
    local defaults = {
        window = {
            width = 0.5,
            min_height = 5,
            max_height = 30,
            margin = 16,
            min_count_width = 4,
            toggle_width = 6,
            prompt_offset = "overlap",
        },
        engine = {
            command = nil,
            args = {},
        },
        matching = {
            auto_refresh = false,
            delete_confirmation = true,
            clear_confirmation = true,
            case = "system",
            hl_eol = false,
        },
        lightbox = {
            view = "system-vsplit",
            fold_style = "nvim",
            fillchar = "-",
            custom_foldtext = nil,
        },
        icons = vim.g.have_nerd_font
                and {
                    candela = "\u{f05e2}", -- Û∞ó¢
                    color = "\u{e22b}", -- Óà´
                    regex = "\u{f069}", -- ÔÅ©
                    highlight = {
                        header = "\u{ea61}", -- Ó©°
                        toggle_on = "\u{f1a25}", -- Û±®•
                        toggle_off = "\u{f1a26}", -- Û±®¶
                    },
                    lightbox = {
                        header = "\u{e68f}", -- Óöè
                        toggle_on = "\u{f1a25}", -- Û±®•
                        toggle_off = "\u{f1a26}", -- Û±®¶
                    },
                }
            or {
                candela = "\u{1F56F}", -- üïØ
                color = "\u{1F3A8}", -- üé®
                regex = "\u{2728}", -- ‚ú®
                highlight = {
                    header = "\u{1F4A1}", -- üí°
                    toggle_on = "\u{25C9}", -- ‚óâ
                    toggle_off = "\u{25CB}", -- ‚óã
                },
                lightbox = {
                    header = "\u{1F50D}", -- üîç
                    toggle_on = "\u{25C9}", -- ‚óâ
                    toggle_off = "\u{25CB}", -- ‚óã
                },
            },
        palette = {
            use = "replace",
            cycle = "constant",
            colors = {
                dark = {
                    "#9D4564", -- DARK MAUVE
                    "#A1464C", -- LIGHT MAROON
                    "#9E4D21", -- SIENNA
                    "#935800", -- MUD
                    "#7F6400", -- MUSTARD
                    "#6C6C00", -- MOSS
                    "#4C7522", -- LEAF GREEN
                    "#257A3F", -- JEWEL GREEN
                    "#007C6A", -- AQUAMARINE
                    "#007690", -- OCEAN
                    "#3368AB", -- MUTED BLUE
                    "#565FAC", -- DUSKY BLUE
                    "#7156A3", -- DARK LAVENDER
                    "#805098", -- EGGPLANT
                    "#94487C", -- ROUGE
                },
                light = {
                    "#F08FAE", -- PINK SHERBET
                    "#F49093", -- SEA PINK
                    "#F0986D", -- TANGERINE
                    "#E2A25D", -- DESERT
                    "#CBAE5E", -- GOLD
                    "#B6B75F", -- OLIVE
                    "#94C16F", -- PISTACHIO
                    "#75C787", -- MANTIS
                    "#65C5B1", -- NEPTUNE
                    "#64BFDB", -- BLUISH CYAN
                    "#7CB4FD", -- CRYSTAL BLUE
                    "#9DAAFE", -- PERIWINKLE
                    "#BBA0F3", -- LILAC
                    "#CD9AE7", -- BABY PURPLE
                    "#E592C8", -- LIGHT ORCHID
                },
            },
            swatches = {
                dark = {
                    GRAY = "#676767",
                    RED = "#A1454F",
                    BLUE = "#016DA6",
                    YELLOW = "#7B6600",
                    GREEN = "#2A793C",
                    ORANGE = "#9A510B",
                    PURPLE = "#7055A3",
                },
                light = {
                    GRAY = "#B1B1B1",
                    RED = "#F59282",
                    BLUE = "#3BC3E5",
                    YELLOW = "#C6B14D",
                    GREEN = "#82C57C",
                    ORANGE = "#EC9C60",
                    PURPLE = "#AAA5FB",
                },
            },
        },
        syntax_highlighting = {
            enabled = true,
            file_types = { ".log", "text" },
        },
    }
<
                                                  *candela-config-options*
Options ~

                                               *candela-config-window*
{window}

‚Ä¢ {width} `number` (0 < n < 1):
        Initial width of the patterns window as a percentage of your entire
        Neovim window width.
‚Ä¢ {min_height} `integer` (1 <= n):
        Minimum height (number of patterns) for the patterns window (initial
        height).
‚Ä¢ {max_height} `integer` (1 <= n):
        Maximum height (number of patterns) for the patterns window.
‚Ä¢ {margin} `integer` (0 <= n):
        Margin space between window and Neovim bounds when Neovim is too small
        to fit the window.
‚Ä¢ {min_count_width} `integer` (1 <= n):
        Minimum width to allocate to the "count" column.
‚Ä¢ {toggle_width} `integer` (1 <= n):
        Width of the (highlight and lightbox) toggle columns.
‚Ä¢ {prompt_offset} `"overlap"` | `"border"`:
        Position of the prompt window in relation to patterns window.

                                               *candela-config-engine*
{engine}

‚Ä¢ {command} `nil` | `"rg"` | `"ag"` | `"ugrep"` | `"ack"` | `"grep"`:
        Regex search engine to use for Candela. When set to `nil`, defaults to
        the first tool found in the list (in order).
‚Ä¢ {args} `string[]`:
        Extra args to pass to the search engine; refer to your tool's
        documentaion. Defaults to flags that display line numbers and remove
        color (exact flags depend on engine used).

                                             *candela-config-matching*
{matching}

‚Ä¢ {auto_refresh} `true` | `false`:
        Automatically refresh pattern matching/highlighting on buffer change.
‚Ä¢ {delete_confirmation} `true` | `false`:
        Require user confirmation upon deleting a pattern.
‚Ä¢ {clear_confirmation} `true` | `false`:
        Require user confirmation upon clearing all patterns.
‚Ä¢ {case} `"system"` | `"sensitive"` | `"ignore"` | `"smart"`
        Case-sensitivity to use when searching. When set to `"system"` it will
        sync with your Neovim 'ignorecase' and 'smartcase' options.
‚Ä¢ {hl_eol} `true` | `false`:
        Highlight entire line (end of line) or only until the last character
        of a line.

                                             *candela-config-lightbox*
{lightbox}

‚Ä¢ {view} `"tab"` | `"system-split"` | `"system-vsplit"` | 
         `"split-left"` | `"split-right"` | `"split-above"` | `"split-below"`:
        Method of breaking out into the Lightbox window. Set to `"system-split"`
        or `"system-vsplit"` to sync with your Neovim 'splitbelow' or
        'splitright' option, respectively.
‚Ä¢ {fold_style} `"fillchar"` | `"count"` | `"preview"` | `"detailed"` |
               `"nvim"`:
        Style to format the foldtext (see |foldtext|):
        ‚Ä¢ `"fillchar"`: display only the fillchar for the entire line.
        ‚Ä¢ `"count"`: display the number of folded lines in the form "# lines".
        ‚Ä¢ `"preview"`: display the beginning of the first folded line.
        ‚Ä¢ `"detailed"`: display the count and preview together.
        ‚Ä¢ `"nvim"`: display Neovim's default foldtext.
‚Ä¢ {fillchar} `string`:
        Fillchar to use for the foldtext (see |fillchar|).
‚Ä¢ {custom_foldtext} `function`:
        Custom foldtext function. If not `nil` and a valid function, it will
        override {fold_style}.

                                                *candela-config-icons*
{icons}
If the user is using a nerd font, Candela will use nerd font symbols as the
default icons. Otherwise, Candela will default to unicode emojis.

‚Ä¢ {candela} `string`:
        Title of UI.
‚Ä¢ {color} `string`:
        Header of Color column.
‚Ä¢ {regex} `string`:
        Header of Regex column.
‚Ä¢ {highlight} `table`:
        ‚Ä¢ {header} `string`:
                Header of Highlight column.
        ‚Ä¢ {toggle_on} `string`:
                Highlight's on toggle.
        ‚Ä¢ {toggle_off} `string`:
                Highlight's off toggle.
‚Ä¢ {lightbox} `table`:
        ‚Ä¢ {header} `string`:
                Header of Lightbox column.
        ‚Ä¢ {toggle_on} `string`:
                Lightbox's on toggle.
        ‚Ä¢ {toggle_off} `string`:
                Lightbox's off toggle.

                                              *candela-config-palette*
{palette}
NOTE: Candela currently only supports hex code format for colors, but taking
ccc.nvim as an optional dependency is planned for the future to expand support
for various other color spaces like RGB, HSL, LCH, OKLCH, etc.

‚Ä¢ {use} `"replace"` | `"prepend"` | `"append"`:
        Choose whether to replace the entire default color palette with your
        own {colors}, or just add to it. The difference between `"prepend"`
        and `"append"` only matters if {cycle} isn't `"random"`.
‚Ä¢ {cycle} `"constant"` | `"random":
        Method of selecting the next color in your palette.
‚Ä¢ {colors} `table`:                          *candela-config-colors*
        The colors defined here will be used by Candela when automatically
        assigning a color to a new regex pattern. Colors are case-insensitive
        but must be valid hex codes. The mode is determined by your Neovim
        'background' option.
        ‚Ä¢ {dark} `string[]`:
                List of colors to use for dark mode.
        ‚Ä¢ {light} `string[]`:
                List of colors to use for light mode.
‚Ä¢ {swatches} `table`:                      *candela-config-swatches*
        The strings defined here may be used as subtitutes for their hex code
        equivalents when changing the color of a regex pattern. Swatches are
        case-insensitive. Colors are case-insensitive but must be valid hex
        codes. The mode is determined by your Neovim 'background' option.
        ‚Ä¢ {dark} `table<string, string>`:
                Table of swatches to their corresponding hex code.
        ‚Ä¢ {light} `table<string, string>`:
                Table of swatches to their corresponding hex code.

                                  *candela-config-syntax-highlighting*
{syntax_highlight}

‚Ä¢ {enabled} `true` | `false`:
        Enable or disable syntax highlighting.
‚Ä¢ {file_types} `string[]`:
        List of file types (e.g. "text" or "rust") and file extensions (e.g.
        ".log" or ".evt") that syntax highlighting should be activated for.

====================================================================================================
KEYMAPS                                                      *candela-keymaps*

Candela pre-defines some useful keymaps with <Plug> that you can hook into to
apply to your own keymap (see |<Plug>|). I personally map my Candela keymaps
to <leader>cd followed by another key for the specific function, but you can
obviously choose whatever you want. The |{rhs}| values are displayed below
along with their corresponding Candela functions:

`<Plug>CandelaUI`: `require("candela.ui").toggle()`
    Toggle UI window.
`<Plug>CandelaAdd`: `require("candela.ui").add()`
    Add pattern in UI.
`<Plug>CandelaRefresh`: `require("candela.commands").commands.refresh.impl()`
    Refresh patterns in current buffer.
`<Plug>CandelaClear`: `require("candela.commands").commands.clear.impl()`
    Clear all patterns.
`<Plug>CandelaMatchAll`: `require("candela.commands").commands.match_all.impl()`
    Vim match all patterns.
`<Plug>CandelaFindAll`: `require("candela.commands").commands.find_all.impl()`
    Find all patterns and send to location list.
`<Plug>CandelaLightbox`: `require("candela.commands").commands.lightbox.impl()`
    Toggle lightbox window.
`<Plug>CandelaHelp`: `require("candela.commands").commands.help.impl()`
    Open UI keymaps menu.

In addition to these presets, you can use any Candela user commands or API
functions to create your own efficient keymap such as instantly importing
patterns from a saved file or editing the last added pattern in the UI (see
|candela-commands| and |candela-api|).

====================================================================================================
COMMANDS                                                    *candela-commands*

There are a handful of user commands defined (accessible via CLI through the
{:Candela} command or programmatically via
`require("candela.commands").commands`) that you may find useful for assigning
to keymaps or programmatically interacting with Candela. Each command has
comprehensive completion that ensures the proper type of value(s) populate for
the proper commands (e.g. `Candela import` will autocomplete with file paths
and `Candela edit` will complete the first argument with your current list of
regexes). See the subcommands below:

{add}: add a pattern. Passing 0 arguments will open the UI with the "Add
Regex" prompt. Passing 1-4 arguments will create a new pattern with the
specified attributes without interacting with the UI.
`:Candela add [regex: string] [color: string] [highlight: boolean] [lightbox: boolean]`

{edit}: edit a pattern's regex to a different regex. Passing only 1 argument
will open the UI with the "Edit Regex" prompt on the pattern at the specified
index or matching the specified regex. Passing 2 arguments will change the
regex of the specified pattern to the new regex.
`:Candela edit <index: integer | regex: string> [new_regex: string]`

{copy}: copy a pattern to an identical pattern with a different regex. Passing
only 1 argument will open the UI with the "Copy Regex" prompt on the pattern
at the specified index or matching the specified regex. Passing 2 arguments
will add a new pattern with the same attributes as the specified pattern, but
with the new regex.
`:Candela copy <index: integer | regex: string> [new_regex: string]`

{delete}: delete any number of patterns by index. Pass any number of indices
to delete one or multiple patterns.
`:Candela delete <index: integer> [indices: integer]...`

{clear}: clear all patterns.
`:Candela clear`

{refresh}: refresh patterns matching/highlighting in current buffer.
`:Candela refresh`

{change_color}: change a pattern's color. Passing only 1 argument will open
the UI with the "Change Color" prompt on the pattern at the specified index or
matching the specified regex. Passing 2 arguments will change the color of the
specified pattern to the new color.
`:Candela change_color <index: integer | regex: string> [new_color: string]`

{toggle_highlight}: toggle a pattern's highlight. Accepts exactly 1 argument
containing the index or the regex of the target pattern.
`:Candela toggle_highlight <index: integer | regex: string>`

{toggle_lightbox}: toggle a pattern's lightbox. Accepts exactly 1 argument
containing the index or the regex of the target pattern.
`:Candela toggle_lightbox <index: integer | regex: string>`

{match}: match any number of pattern regexes. Pass any number of regex strings
from your patterns to Vim match them together.
`:Candela match <regex: string> [more_regex: string]...`

{match_all}: match all pattern regexes. Vim match all regex strings from your
patterns at once.
`:Candela match_all`

{find}: find any number of pattern regexes and send to location list. Pass any
number of regex strings from your patterns to send all lines containing the
regex strings to your location list.
`:Candela find <regex: string> [more_regex: string]...`

{find_all}: find all pattern regexes and send to location list. Send every
line containing any of your patterns' regex strings to a location list.
`:Candela find_all`

{lightbox}: toggle the lightbox window. Behavior depends on one of three
cases:
* Closed: open and focus the lightbox window
* Open and unfocused: focus the lightbox window
* Open and focused: close the lightbox window
`:Candela lightbox`

{import}: import patterns from a '.lua' file.
`:Candela import <path/to/import_file.lua>`

{export}: export patterns to a '.lua' file.
`:Candela export <path/to/export_file.lua>`

{help}: display UI keymaps.
`:Candela help`

{health}: perform a |:checkhealth| on Candela.
`:Candela health`

====================================================================================================
API                                                              *candela-api*
The following API definitions will assume you have brought Candela into scope
with `local candela = require("candela")`.
                                                              *candela-api-ui*
UI ~
The UI methods can be used when wanting to program some action concerning the
UI and can be accessed through `candela.ui`. The `copy()`, `edit()`, and
`change_color()` methods expect the user to be in the UI at the time of method
call. The corresponding CLI commands do this for when called with a single
{index} or {regex} argument, but if you'd like to directly implement one of
these three, make sure you call `show_patterns()` first.

get({lang}, {query_name})                         *vim.treesitter.query.get()*
    Returns the runtime query {query_name} for {lang}.

    Parameters: ~
      ‚Ä¢ {lang}        (`string`) Language to use for the query
      ‚Ä¢ {query_name}  (`string`) Name of the query (e.g. "highlights")

    Return: ~
        (`vim.treesitter.Query?`) Parsed query. `nil` if no query files are
        found. See |vim.treesitter.Query|.
show_patterns()                                   *candela.ui.show_patterns()*

hide_patterns()                                   *candela.ui.hide_patterns()*

hide_prompt()                                       *candela.ui.hide_prompt()*

toggle()                                                 *candela.ui.toggle()*

toggle_select_pattern()                   *candela.ui.toggle_select_pattern()*

add()                                                       *candela.ui.add()*

edit({index_or_regex})                                     *candela.ui.edit()*

    Parameters: ~
      ‚Ä¢ {index_or_regex}  (`string`) Language to use for the query

copy({index_or_regex})                                     *candela.ui.copy()*

    Parameters: ~
      ‚Ä¢ {index_or_regex}  (`string`) Language to use for the query

delete({ask})                                            *candela.ui.delete()*

    Parameters: ~
      ‚Ä¢ {ask}  (`string`) Language to use for the query

clear({ask})                                              *candela.ui.clear()*

    Parameters: ~
      ‚Ä¢ {ask}  (`string`) Language to use for the query

refresh({force}, {keep_base_buffer})                    *candela.ui.refresh()*

    Parameters: ~
      ‚Ä¢ {force}             (`string`) Language to use for the query
      ‚Ä¢ {keep_base_buffer}  (`string`) Name of the query (e.g. "highlights")

change_color({index_or_regex})                     *candela.ui.change_color()*

    Parameters: ~
      ‚Ä¢ {index_or_regex}  (`string`) Language to use for the query

toggle_highlight()                             *candela.ui.toggle_highlight()*

toggle_lightbox()                               *candela.ui.toggle_lightbox()*

locate({all}, {command})                                 *candela.ui.locate()*

    Parameters: ~
      ‚Ä¢ {all}      (`string`) Language to use for the query
      ‚Ä¢ {command}  (`string`) Name of the query (e.g. "highlights")

import()                                                 *candela.ui.import()*

export()                                                 *candela.ui.export()*

help()                                                     *candela.ui.help()*

                                                        *candela-api-patterns*
Patterns ~
The Patterns methods are used for directly modifying the state of Candela's
patterns and can be accessed through `candela.patterns`. These methods
completely disconnect the user from the UI; however, they still maintain the
UI's state with the state of the patterns data, ensuring synchronicity between
the two so you will never modify your patterns data without seeing it
represented in the UI.

add({regex}, {color}, {highlight}, {lightbox})        *candela.patterns.add()*

    Parameters: ~
      ‚Ä¢ {regex}      (`string`) Language to use for the query
      ‚Ä¢ {color}      (`string`) Name of the query (e.g. "highlights")
      ‚Ä¢ {highlight}  (`string`) Name of the query (e.g. "highlights")
      ‚Ä¢ {lightbox}   (`string`) Name of the query (e.g. "highlights")

edit({index_or_regex}, {new_regex})                  *candela.patterns.edit()*

    Parameters: ~
      ‚Ä¢ {index_or_regex}  (`string`) Language to use for the query
      ‚Ä¢ {new_regex}       (`string`) Name of the query (e.g. "highlights")

delete({index_or_regex})                           *candela.patterns.delete()*

    Parameters: ~
      ‚Ä¢ {index_or_regex}  (`string`) Language to use for the query

    Return: ~
        (`bool`) Boolean `true` on success, `false` if the item was not
        deleted for whatever reason.

clear()                                             *candela.patterns.clear()*

    Return: ~
        (`bool`) Boolean `true` on success, `false` if the item was not
        deleted for whatever reason.

change_color({index_or_regex}, {new_color})  *candela.patterns.change_color()*

    Parameters: ~
      ‚Ä¢ {index_or_regex}  (`string`) Language to use for the query
      ‚Ä¢ {new_color}       (`string`) Name of the query (e.g. "highlights")

toggle_highlight({index_or_regex})       *candela.patterns.toggle_highlight()*

    Parameters: ~
      ‚Ä¢ {index_or_regex}  (`string`) Language to use for the query

    Return: ~
        (`bool`) New state of the highlight toggle (on or off).

toggle_lightbox({index_or_regex})         *candela.patterns.toggle_lightbox()*

    Parameters: ~
      ‚Ä¢ {index_or_regex}  (`string`) Language to use for the query

    Return: ~
        (`bool`) New state of the lightbox toggle (on or off).


====================================================================================================
LIGHTBOX                                                    *candela-lightbox*

====================================================================================================
IO                                                                *candela-io*

====================================================================================================
ACKNOWLEDGEMENTS                                    *candela-acknowledgements*

vim:tw=78:ts=8:et:ft=help:norl:
